// Generated by CoffeeScript 1.12.4
var DEFAULT_RESULTS_CACHING_INTERVAL, IMG_MAKER_API_PREFIX, IMG_MAKER_API_VERSION, assign, getImgMakerHelper, memoizee;

assign = require('lodash/assign');

memoizee = require('memoizee');

IMG_MAKER_API_VERSION = '1';

IMG_MAKER_API_PREFIX = "/api/v" + IMG_MAKER_API_VERSION;

DEFAULT_RESULTS_CACHING_INTERVAL = 10 * 60 * 1000;

getImgMakerHelper = function(imageMakerUrl, request) {
  var buildOptions, defaultBuildImgMakerUrl, exports, sendRequest;
  exports = {};
  buildOptions = function(options) {
    var url;
    url = options.url;
    url = "" + IMG_MAKER_API_PREFIX + url;
    return assign({
      method: 'GET'
    }, options, {
      url: url,
      baseUrl: imageMakerUrl
    });
  };
  exports.request = sendRequest = function(options) {
    return request.send(buildOptions(options));
  };
  exports.stream = function(options) {
    return request.stream(buildOptions(options));
  };
  defaultBuildImgMakerUrl = function(arg) {
    var deviceType, url, version;
    url = arg.url, deviceType = arg.deviceType, version = arg.version;
    url += "?deviceType=" + deviceType;
    if (version) {
      url += "&version=" + version;
    }
    return url;
  };
  exports.buildApiRequester = function(arg) {
    var buildUrl, callHelper, fnLength, maxAge, memoizedFn, normalizer, onError, postProcess, ref, ref1, ref2, ref3, url, withVersion;
    ref = arg != null ? arg : {}, url = (ref1 = ref.url) != null ? ref1 : '', withVersion = (ref2 = ref.withVersion) != null ? ref2 : false, postProcess = ref.postProcess, onError = ref.onError, buildUrl = (ref3 = ref.buildUrl) != null ? ref3 : defaultBuildImgMakerUrl, maxAge = ref.maxAge;
    if (withVersion) {
      fnLength = 2;
      normalizer = function(arg1) {
        var deviceType, version;
        deviceType = arg1[0], version = arg1[1];
        return deviceType + "@" + version;
      };
    } else {
      fnLength = 1;
      normalizer = function(arg1) {
        var deviceType;
        deviceType = arg1[0];
        return deviceType;
      };
    }
    callHelper = function(deviceType, version) {
      var fullUrl, p;
      fullUrl = buildUrl({
        url: url,
        deviceType: deviceType,
        version: version
      });
      p = sendRequest({
        url: fullUrl
      });
      if (postProcess) {
        p = p.then(postProcess);
      }
      if (onError) {
        p = p["catch"](onError);
      }
      return p;
    };
    if (maxAge === void 0) {
      maxAge = DEFAULT_RESULTS_CACHING_INTERVAL;
    } else if (maxAge === null) {
      maxAge = void 0;
    }
    memoizedFn = memoizee(callHelper, {
      normalizer: normalizer,
      promise: true,
      maxAge: maxAge,
      length: fnLength
    });
    return function(deviceType, version) {
      if (withVersion) {
        version || (version = 'latest');
      }
      return memoizedFn(deviceType, version);
    };
  };
  return exports;
};

module.exports = getImgMakerHelper;
